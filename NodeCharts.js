// Generated by CoffeeScript 1.7.1
(function() {
  var NodeCharts, req;

  req = typeof require !== 'undefined' && require;


  /**
  * NodeCharts
  * @param {Object} o.svgTagAttrs
  * @constructor
  *
   */

  NodeCharts = (function() {
    var adaptMap, components, defSvgTagAttrs;

    adaptMap = {
      width: 1,
      height: 1
    };

    defSvgTagAttrs = {
      width: 200,
      height: 200,
      viewbox: 200
    };

    components = {
      circle: req ? require('./Circle') : window.Circle,
      line: req ? require('./Line') : window.Line
    };

    function NodeCharts(o) {
      var h, w;
      o = o || {};
      this.adapt = adaptMap.hasOwnProperty(o.adapt) ? o.adapt : 'width';
      w = o.width || defSvgTagAttrs.width;
      h = o.height || defSvgTagAttrs.height;
      this.viewbox = '0 0 ' + w + ' ' + h;
      this.els = [];
    }

    NodeCharts.prototype.add = function(type, o) {
      type = type.toLowerCase();
      if (components.hasOwnProperty(type)) {
        return this.els.push(new components[type](o));
      } else {
        throw '不支持的组件类型: ' + type;
      }
    };

    NodeCharts.prototype.reset = function() {
      return this.els = [];
    };


    /**
    @param {Boolean} [withTag=true] 是否输出<svg>标签
     */

    NodeCharts.prototype.toHTML = function(withTag) {
      var el, els, _i, _len, _ref;
      withTag = withTag !== false;
      els = '';
      _ref = this.els;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        els += el.toHTML();
      }
      if (withTag) {
        return '<svg viewbox="' + this.viewbox + '" style="' + this.adapt + ':100%;">' + els + '</svg>';
      } else {
        return els;
      }
    };

    NodeCharts.prototype.toString = function() {
      return this.toHTML(true);
    };

    return NodeCharts;

  })();

  if (typeof module !== 'undefined') {
    module.exports = NodeCharts;
  } else if (typeof define === 'function') {
    define(function(require, exports, module) {
      return module.exports = NodeCharts;
    });
  } else {
    window.NodeCharts = NodeCharts;
  }

}).call(this);

//# sourceMappingURL=NodeCharts.map
