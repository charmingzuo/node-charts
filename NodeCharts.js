// Generated by CoffeeScript 1.7.1

/**
* NodeCharts
* @param {Object} o.svgTagAttrs
* @constructor
*
 */

(function() {
  var NodeCharts;

  NodeCharts = (function() {
    var components, defSvgTagAttrs, req, seq;

    seq = 0;

    defSvgTagAttrs = {
      id: function() {
        return seq++;
      },
      width: 200,
      height: 200
    };

    req = typeof require !== 'undefined' && require;

    components = {
      circle: req ? require('./Circle') : window.Circle,
      line: req ? require('./Line') : window.Line
    };

    function NodeCharts(o) {
      this.svgTagAttrs || (this.svgTagAttrs = {});
      this.els = [];
    }

    NodeCharts.prototype.add = function(type, o) {
      type = type.toLowerCase();
      if (components.hasOwnProperty(type)) {
        return this.els.push(new components[type](o));
      } else {
        throw '不支持的组件类型: ' + type;
      }
    };

    NodeCharts.prototype.reset = function() {
      return this.els = [];
    };


    /**
    @param {Boolean} [withTag=true] 是否输出<svg>标签
     */

    NodeCharts.prototype.toHTML = function(withTag) {
      var el, els, key, val, _i, _len, _ref, _ref1;
      withTag = withTag !== false;
      _ref = this.els;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        els = el.toHTML();
      }
      if (withTag) {
        _ref1 = this.svgTagAttrs;
        for (key in _ref1) {
          val = _ref1[key];
          svgTagAttrs += key + '="' + val + '"';
        }
        return '<svg ' + svgTagAttrs + '>' + els + '</svg>';
      } else {
        return els;
      }
    };

    NodeCharts.prototype.toString = function() {
      return this.toHTML(true);
    };

    return NodeCharts;

  })();

  if (typeof module !== 'undefined') {
    module.exports = NodeCharts;
  } else if (typeof define === 'function') {
    define(function(require, exports, module) {
      return module.exports = NodeCharts;
    });
  } else {
    window.NodeCharts = NodeCharts;
  }

}).call(this);
